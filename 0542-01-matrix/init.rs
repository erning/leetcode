pub fn update_matrix(mat: Vec<Vec<i32>>) -> Vec<Vec<i32>> {
    let m = mat.len();
    let n = mat[0].len();
    const MAX: i32 = 1_000_000_000;
    let mut mat = mat;
    for j in 0..m {
        for i in 0..n {
            if mat[j][i] == 0 {
                continue;
            }
            let a = if i > 0 { mat[j][i - 1] } else { MAX };
            let b = if j > 0 { mat[j - 1][i] } else { MAX };
            mat[j][i] = MAX.min(a + 1).min(b + 1);
        }
    }
    for j in (0..m).rev() {
        for i in (0..n).rev() {
            if mat[j][i] == 0 {
                continue;
            }
            let a = if i < n - 1 { mat[j][i + 1] } else { MAX };
            let b = if j < m - 1 { mat[j + 1][i] } else { MAX };
            mat[j][i] = mat[j][i].min(a + 1).min(b + 1);
        }
    }
    mat
}

#[cfg(test)]
mod tests {
    use super::*;

    fn tf(mat: &[&[i32]], expected: &[&[i32]]) {
        let input = mat.into_iter().map(|v| v.to_vec()).collect();
        let output = update_matrix(input);
        assert_eq!(output, expected, "{:?}", mat);
    }

    #[test]
    fn example() {
        tf(
            &[&[0, 0, 0], &[0, 1, 0], &[0, 0, 0]],
            &[&[0, 0, 0], &[0, 1, 0], &[0, 0, 0]],
        );
        tf(
            &[&[0, 0, 0], &[0, 1, 0], &[1, 1, 1]],
            &[&[0, 0, 0], &[0, 1, 0], &[1, 2, 1]],
        );
        tf(
            &[
                &[0, 1, 0, 1, 1],
                &[1, 1, 0, 0, 1],
                &[0, 0, 0, 1, 0],
                &[1, 0, 1, 1, 1],
                &[1, 0, 0, 0, 1],
            ],
            &[
                &[0, 1, 0, 1, 2],
                &[1, 1, 0, 0, 1],
                &[0, 0, 0, 1, 0],
                &[1, 0, 1, 1, 1],
                &[1, 0, 0, 0, 1],
            ],
        );
        tf(
            &[
                &[1, 1, 0, 0, 1, 0, 0, 1, 1, 0],
                &[1, 0, 0, 1, 0, 1, 1, 1, 1, 1],
                &[1, 1, 1, 0, 0, 1, 1, 1, 1, 0],
                &[0, 1, 1, 1, 0, 1, 1, 1, 1, 1],
                &[0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
                &[1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
                &[0, 1, 1, 1, 1, 1, 1, 0, 0, 1],
                &[1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                &[0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
                &[1, 1, 1, 0, 1, 0, 1, 1, 1, 1],
            ],
            &[
                &[2, 1, 0, 0, 1, 0, 0, 1, 1, 0],
                &[1, 0, 0, 1, 0, 1, 1, 2, 2, 1],
                &[1, 1, 1, 0, 0, 1, 2, 2, 1, 0],
                &[0, 1, 2, 1, 0, 1, 2, 3, 2, 1],
                &[0, 0, 1, 2, 1, 2, 1, 2, 1, 0],
                &[1, 1, 2, 3, 2, 1, 0, 1, 1, 1],
                &[0, 1, 2, 3, 2, 1, 1, 0, 0, 1],
                &[1, 2, 1, 2, 1, 0, 0, 1, 1, 2],
                &[0, 1, 0, 1, 1, 0, 1, 2, 2, 3],
                &[1, 2, 1, 0, 1, 0, 1, 2, 3, 4],
            ],
        );
        tf(
            &[
                &[1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
                &[1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
                &[1, 1, 1, 1, 0, 0, 0, 1, 1, 0],
                &[1, 1, 1, 1, 1, 1, 0, 0, 1, 0],
                &[1, 0, 0, 1, 1, 1, 0, 1, 0, 1],
                &[0, 0, 1, 0, 0, 1, 1, 0, 0, 1],
                &[0, 1, 0, 1, 1, 1, 1, 1, 1, 1],
                &[1, 0, 0, 1, 1, 0, 0, 0, 0, 0],
                &[0, 0, 1, 1, 1, 1, 0, 1, 1, 1],
                &[1, 1, 0, 0, 1, 0, 1, 0, 1, 1],
            ],
            &[
                &[2, 1, 0, 1, 2, 2, 2, 3, 3, 2],
                &[2, 1, 0, 1, 1, 1, 1, 2, 2, 1],
                &[3, 2, 1, 1, 0, 0, 0, 1, 1, 0],
                &[2, 1, 1, 2, 1, 1, 0, 0, 1, 0],
                &[1, 0, 0, 1, 1, 1, 0, 1, 0, 1],
                &[0, 0, 1, 0, 0, 1, 1, 0, 0, 1],
                &[0, 1, 0, 1, 1, 1, 1, 1, 1, 1],
                &[1, 0, 0, 1, 1, 0, 0, 0, 0, 0],
                &[0, 0, 1, 1, 2, 1, 0, 1, 1, 1],
                &[1, 1, 0, 0, 1, 0, 1, 0, 1, 2],
            ],
        )
    }
}
