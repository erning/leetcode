pub fn update_matrix(mat: Vec<Vec<i32>>) -> Vec<Vec<i32>> {
    let m = mat.len();
    let n = mat[0].len();
    const MAX: i32 = 1_000_000_000;
    let mut rv = vec![vec![MAX; n]; m];
    for j in 0..m {
        for i in 0..n {
            if mat[j][i] == 0 {
                rv[j][i] = 0;
                continue;
            }
            if (i > 0 && mat[j][i - 1] == 0)
                || (i < n - 1 && mat[j][i + 1] == 0)
                || (j > 0 && mat[j - 1][i] == 0)
                || (j < m - 1 && mat[j + 1][i] == 0)
            {
                rv[j][i] = 1;
                continue;
            }
        }
    }
    let mut done = false;
    while !done {
        done = true;
        for j in 0..m {
            for i in 0..n {
                let a = if j > 0 { rv[j - 1][i] + 1 } else { MAX };
                let b = if j < m - 1 { rv[j + 1][i] + 1 } else { MAX };
                let c = if i > 0 { rv[j][i - 1] + 1 } else { MAX };
                let d = if i < n - 1 { rv[j][i + 1] + 1 } else { MAX };
                let v = rv[j][i].min(a).min(b).min(c).min(d);
                if v != rv[j][i] {
                    rv[j][i] = v;
                    done = false;
                }
            }
        }
    }
    rv
}

#[cfg(test)]
mod tests {
    use super::*;

    fn tf(mat: &[&[i32]], expected: &[&[i32]]) {
        let input = mat.into_iter().map(|v| v.to_vec()).collect();
        let output = update_matrix(input);
        assert_eq!(output, expected, "{:?}", mat);
    }

    #[test]
    fn example() {
        tf(
            &[&[0, 0, 0], &[0, 1, 0], &[0, 0, 0]],
            &[&[0, 0, 0], &[0, 1, 0], &[0, 0, 0]],
        );
        tf(
            &[&[0, 0, 0], &[0, 1, 0], &[1, 1, 1]],
            &[&[0, 0, 0], &[0, 1, 0], &[1, 2, 1]],
        );
        tf(
            &[
                &[0, 1, 0, 1, 1],
                &[1, 1, 0, 0, 1],
                &[0, 0, 0, 1, 0],
                &[1, 0, 1, 1, 1],
                &[1, 0, 0, 0, 1],
            ],
            &[
                &[0, 1, 0, 1, 2],
                &[1, 1, 0, 0, 1],
                &[0, 0, 0, 1, 0],
                &[1, 0, 1, 1, 1],
                &[1, 0, 0, 0, 1],
            ],
        );
        tf(
            &[
                &[1, 1, 0, 0, 1, 0, 0, 1, 1, 0],
                &[1, 0, 0, 1, 0, 1, 1, 1, 1, 1],
                &[1, 1, 1, 0, 0, 1, 1, 1, 1, 0],
                &[0, 1, 1, 1, 0, 1, 1, 1, 1, 1],
                &[0, 0, 1, 1, 1, 1, 1, 1, 1, 0],
                &[1, 1, 1, 1, 1, 1, 0, 1, 1, 1],
                &[0, 1, 1, 1, 1, 1, 1, 0, 0, 1],
                &[1, 1, 1, 1, 1, 0, 0, 1, 1, 1],
                &[0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
                &[1, 1, 1, 0, 1, 0, 1, 1, 1, 1],
            ],
            &[
                &[2, 1, 0, 0, 1, 0, 0, 1, 1, 0],
                &[1, 0, 0, 1, 0, 1, 1, 2, 2, 1],
                &[1, 1, 1, 0, 0, 1, 2, 2, 1, 0],
                &[0, 1, 2, 1, 0, 1, 2, 3, 2, 1],
                &[0, 0, 1, 2, 1, 2, 1, 2, 1, 0],
                &[1, 1, 2, 3, 2, 1, 0, 1, 1, 1],
                &[0, 1, 2, 3, 2, 1, 1, 0, 0, 1],
                &[1, 2, 1, 2, 1, 0, 0, 1, 1, 2],
                &[0, 1, 0, 1, 1, 0, 1, 2, 2, 3],
                &[1, 2, 1, 0, 1, 0, 1, 2, 3, 4],
            ],
        );
        tf(
            &[
                &[1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
                &[1, 1, 0, 1, 1, 1, 1, 1, 1, 1],
                &[1, 1, 1, 1, 0, 0, 0, 1, 1, 0],
                &[1, 1, 1, 1, 1, 1, 0, 0, 1, 0],
                &[1, 0, 0, 1, 1, 1, 0, 1, 0, 1],
                &[0, 0, 1, 0, 0, 1, 1, 0, 0, 1],
                &[0, 1, 0, 1, 1, 1, 1, 1, 1, 1],
                &[1, 0, 0, 1, 1, 0, 0, 0, 0, 0],
                &[0, 0, 1, 1, 1, 1, 0, 1, 1, 1],
                &[1, 1, 0, 0, 1, 0, 1, 0, 1, 1],
            ],
            &[
                &[2, 1, 0, 1, 2, 2, 2, 3, 3, 2],
                &[2, 1, 0, 1, 1, 1, 1, 2, 2, 1],
                &[3, 2, 1, 1, 0, 0, 0, 1, 1, 0],
                &[2, 1, 1, 2, 1, 1, 0, 0, 1, 0],
                &[1, 0, 0, 1, 1, 1, 0, 1, 0, 1],
                &[0, 0, 1, 0, 0, 1, 1, 0, 0, 1],
                &[0, 1, 0, 1, 1, 1, 1, 1, 1, 1],
                &[1, 0, 0, 1, 1, 0, 0, 0, 0, 0],
                &[0, 0, 1, 1, 2, 1, 0, 1, 1, 1],
                &[1, 1, 0, 0, 1, 0, 1, 0, 1, 2],
            ],
        )
    }
}
